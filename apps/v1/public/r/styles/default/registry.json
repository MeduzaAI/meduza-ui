{
  "name": "meduza-ui",
  "items": [
    {
      "name": "button",
      "type": "registry:ui",
      "description": "A flexible button component with multiple variants and sizes",
      "dependencies": [],
      "registryDependencies": [
        "utils"
      ],
      "files": [
        {
          "path": "registry/default/ui/button.vue",
          "content": "<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { useClassName } from '@/lib/utils'\n\n// Enums for type safety\nenum ButtonVariant {\n  Primary = 'primary',\n  Secondary = 'secondary',\n  Outline = 'outline',\n  Ghost = 'ghost',\n  Destructive = 'destructive'\n}\n\nenum ButtonSize {\n  Small = 'sm',\n  Medium = 'md',\n  Large = 'lg'\n}\n\ninterface ButtonProps {\n  variant?: ButtonVariant\n  size?: ButtonSize\n  disabled?: boolean\n  type?: 'button' | 'submit' | 'reset'\n}\n\nconst props = withDefaults(defineProps<ButtonProps>(), {\n  variant: ButtonVariant.Primary,\n  size: ButtonSize.Medium,\n  disabled: false,\n  type: 'button'\n})\n\n// Root class using component name in kebab-case\nconst { b } = useClassName('button')\n\nconst buttonClasses = computed(() => {\n  return b([\n    props.variant,\n    props.size,\n    { disabled: props.disabled }\n  ])\n})\n</script>\n\n<template>\n  <button\n    :class=\"buttonClasses\"\n    :disabled=\"disabled\"\n    :type=\"type\"\n    v-bind=\"$attrs\"\n  >\n    <slot />\n  </button>\n</template>\n\n<style lang=\"scss\" scoped>\n.button {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  white-space: nowrap;\n  border-radius: calc(var(--radius) - 2px);\n  transition: colors 0.2s;\n  cursor: pointer;\n  border: 1px solid transparent;\n  font-weight: 500;\n  \n  &:focus-visible {\n    outline: 2px solid var(--ring-color);\n    outline-offset: 2px;\n  }\n  \n  // Variants using CSS variables directly\n  &--primary {\n    background-color: var(--primary-color);\n    color: var(--primary-foreground-color);\n    \n    &:hover:not(.button--disabled) {\n      opacity: 0.9;\n    }\n  }\n  \n  &--secondary {\n    background-color: var(--secondary-color);\n    color: var(--secondary-foreground-color);\n    \n    &:hover:not(.button--disabled) {\n      opacity: 0.8;\n    }\n  }\n  \n  &--outline {\n    border: 1px solid var(--border-color);\n    background-color: var(--background-color);\n    color: var(--foreground-color);\n    \n    &:hover:not(.button--disabled) {\n      background-color: var(--accent-color);\n      color: var(--accent-foreground-color);\n    }\n  }\n  \n  &--ghost {\n    background-color: transparent;\n    color: var(--foreground-color);\n    \n    &:hover:not(.button--disabled) {\n      background-color: var(--accent-color);\n      color: var(--accent-foreground-color);\n    }\n  }\n  \n  &--destructive {\n    background-color: var(--destructive-color);\n    color: var(--destructive-foreground-color);\n    \n    &:hover:not(.button--disabled) {\n      opacity: 0.9;\n    }\n  }\n  \n  // Sizes\n  &--sm {\n    height: 36px;\n    padding: 0 12px;\n    font-size: 0.875rem;\n  }\n  \n  &--md {\n    height: 40px;\n    padding: 0 16px;\n    font-size: 0.875rem;\n  }\n  \n  &--lg {\n    height: 44px;\n    padding: 0 24px;\n    font-size: 1rem;\n  }\n  \n  // States\n  &--disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    pointer-events: none;\n  }\n}\n</style>\n",
          "type": "registry:ui",
          "target": "button.vue"
        }
      ],
      "$schema": "https://meduza-ui.dev/schema/registry-item.json"
    },
    {
      "name": "utils",
      "type": "registry:lib",
      "description": "BEM className utility for Vue components",
      "dependencies": [],
      "files": [
        {
          "path": "registry/default/lib/utils.ts",
          "content": "/**\n * @name utils\n * @description BEM className utility for Vue components\n * @type registry:lib\n * @dependencies []\n */\n\n// Types for simplified BEM className utility\ninterface UseClassNameReturn {\n    b: () => string;\n    e: (element: string, condition?: boolean) => string;\n    em: (element: string, modifier: string, condition?: boolean) => string;\n    m: (modifier: string, condition?: boolean) => string;\n}\n\nexport function useClassName(block: string): UseClassNameReturn {\n    return {\n        // Block: returns the base block name\n        b: (): string => block,\n\n        // Element: returns block__element (conditional if condition provided)\n        e: (element: string, condition?: boolean): string => {\n            if (condition === false) return '';\n            return `${block}__${element}`;\n        },\n\n        // Element with modifier: returns block__element--modifier (conditional if condition provided)\n        em: (element: string, modifier: string, condition?: boolean): string => {\n            if (condition === false) return '';\n            return `${block}__${element}--${modifier}`;\n        },\n\n        // Modifier: returns block--modifier (conditional if condition provided)\n        m: (modifier: string, condition?: boolean): string => {\n            if (condition === false) return '';\n            return `${block}--${modifier}`;\n        }\n    };\n}\n",
          "type": "registry:lib",
          "target": "utils.ts"
        }
      ],
      "$schema": "https://meduza-ui.dev/schema/registry-item.json"
    },
    {
      "name": "index",
      "type": "registry:style",
      "description": "Base style system with SCSS variables and mixins",
      "dependencies": [
        "sass"
      ],
      "registryDependencies": [
        "utils",
        "useTheme"
      ],
      "files": [
        {
          "path": "registry/default/styles/_variables.scss",
          "content": "// Comprehensive semantic CSS variables - no conflicts with user styles\n:root {\n    /* Colors - Semantic */\n    --primary-color: #334155;\n    --primary-foreground-color: #f8fafc;\n    --secondary-color: #f1f5f9;\n    --secondary-foreground-color: #0f172a;\n    --accent-color: #3b82f6;\n    --accent-foreground-color: #ffffff;\n    --destructive-color: #ef4444;\n    --destructive-foreground-color: #ffffff;\n    --warning-color: #f59e0b;\n    --warning-foreground-color: #ffffff;\n    --success-color: #10b981;\n    --success-foreground-color: #ffffff;\n    --info-color: #06b6d4;\n    --info-foreground-color: #ffffff;\n\n    /* Surface colors */\n    --background-color: #ffffff;\n    --foreground-color: #0f172a;\n    --surface-color: #ffffff;\n    --surface-foreground-color: #0f172a;\n    --card-color: #ffffff;\n    --card-foreground-color: #0f172a;\n    --popover-color: #ffffff;\n    --popover-foreground-color: #0f172a;\n\n    /* Border and outline */\n    --border-color: #e2e8f0;\n    --input-color: #e2e8f0;\n    --ring-color: #3b82f6;\n    --outline-color: #94a3b8;\n\n    /* Muted colors */\n    --muted-color: #f8fafc;\n    --muted-foreground-color: #64748b;\n\n    /* Spacing - comprehensive scale in pixels */\n    --spacing-0: 0px;\n    --spacing-px: 1px;\n    --spacing-0-5: 2px;\n    --spacing-1: 4px;\n    --spacing-1-5: 6px;\n    --spacing-2: 8px;\n    --spacing-2-5: 10px;\n    --spacing-3: 12px;\n    --spacing-3-5: 14px;\n    --spacing-4: 16px;\n    --spacing-5: 20px;\n    --spacing-6: 24px;\n    --spacing-7: 28px;\n    --spacing-8: 32px;\n    --spacing-9: 36px;\n    --spacing-10: 40px;\n    --spacing-11: 44px;\n    --spacing-12: 48px;\n    --spacing-14: 56px;\n    --spacing-16: 64px;\n    --spacing-20: 80px;\n    --spacing-24: 96px;\n    --spacing-28: 112px;\n    --spacing-32: 128px;\n\n    /* Typography - semantic naming */\n    --font-heading: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    --font-body: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    --font-mono: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', monospace;\n\n    /* Font sizes - pixels */\n    --text-xs: 12px;\n    --text-sm: 14px;\n    --text-base: 16px;\n    --text-lg: 18px;\n    --text-xl: 20px;\n    --text-2xl: 24px;\n    --text-3xl: 30px;\n    --text-4xl: 36px;\n    --text-5xl: 48px;\n    --text-6xl: 60px;\n\n    /* Semantic text sizes */\n    --text-caption: var(--text-xs);\n    --text-body: var(--text-base);\n    --text-lead: var(--text-lg);\n    --text-subhead: var(--text-xl);\n    --text-heading: var(--text-2xl);\n    --text-title: var(--text-3xl);\n    --text-display: var(--text-4xl);\n\n    /* Font weights */\n    --font-light: 300;\n    --font-regular: 400;\n    --font-medium: 500;\n    --font-semibold: 600;\n    --font-bold: 700;\n\n    /* Line heights */\n    --leading-none: 1;\n    --leading-tight: 1.25;\n    --leading-snug: 1.375;\n    --leading-normal: 1.5;\n    --leading-relaxed: 1.625;\n    --leading-loose: 2;\n\n    /* Border radius - pixels */\n    --radius-none: 0px;\n    --radius-sm: 2px;\n    --radius-base: 4px;\n    --radius-md: 6px;\n    --radius-lg: 8px;\n    --radius-xl: 12px;\n    --radius-2xl: 16px;\n    --radius-3xl: 24px;\n    --radius-full: 9999px;\n\n    /* Shadows - pixels */\n    --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.05);\n    --shadow-base: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06);\n    --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n    --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n    --shadow-2xl: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n\n    /* Transitions */\n    --transition-fast: 0.15s ease;\n    --transition-base: 0.2s ease;\n    --transition-slow: 0.3s ease;\n\n    /* Z-index scale */\n    --z-dropdown: 1000;\n    --z-sticky: 1020;\n    --z-fixed: 1030;\n    --z-modal-backdrop: 1040;\n    --z-modal: 1050;\n    --z-popover: 1060;\n    --z-tooltip: 1070;\n}\n\n[data-mode=\"dark\"] {\n    --primary-color: #e2e8f0;\n    --primary-foreground-color: #0f172a;\n    --secondary-color: #1e293b;\n    --secondary-foreground-color: #f8fafc;\n    --accent-color: #60a5fa;\n    --accent-foreground-color: #1e293b;\n    --destructive-color: #f87171;\n    --destructive-foreground-color: #1e293b;\n    --warning-color: #fbbf24;\n    --warning-foreground-color: #1e293b;\n    --success-color: #34d399;\n    --success-foreground-color: #1e293b;\n    --info-color: #22d3ee;\n    --info-foreground-color: #1e293b;\n\n    --background-color: #0f172a;\n    --foreground-color: #f8fafc;\n    --surface-color: #1e293b;\n    --surface-foreground-color: #f8fafc;\n    --card-color: #1e293b;\n    --card-foreground-color: #f8fafc;\n    --popover-color: #1e293b;\n    --popover-foreground-color: #f8fafc;\n\n    --border-color: #334155;\n    --input-color: #334155;\n    --ring-color: #60a5fa;\n    --outline-color: #64748b;\n\n    --muted-color: #1e293b;\n    --muted-foreground-color: #94a3b8;\n}",
          "type": "registry:style",
          "target": "_variables.scss"
        },
        {
          "path": "registry/default/styles/_mixins.scss",
          "content": "// Typography utility mixin - generates font styles from string like 'text-lg-semibold'\n@mixin text($style) {\n    // Examples: 'text-xs-regular', 'text-lg-semibold', 'heading-bold'\n\n    @if $style =='text-xs-light' {\n        font-size: var(--text-xs);\n        font-weight: var(--font-light);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-xs-regular' {\n        font-size: var(--text-xs);\n        font-weight: var(--font-regular);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-xs-medium' {\n        font-size: var(--text-xs);\n        font-weight: var(--font-medium);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-xs-semibold' {\n        font-size: var(--text-xs);\n        font-weight: var(--font-semibold);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-xs-bold' {\n        font-size: var(--text-xs);\n        font-weight: var(--font-bold);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-sm-light' {\n        font-size: var(--text-sm);\n        font-weight: var(--font-light);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-sm-regular' {\n        font-size: var(--text-sm);\n        font-weight: var(--font-regular);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-sm-medium' {\n        font-size: var(--text-sm);\n        font-weight: var(--font-medium);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-sm-semibold' {\n        font-size: var(--text-sm);\n        font-weight: var(--font-semibold);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-sm-bold' {\n        font-size: var(--text-sm);\n        font-weight: var(--font-bold);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-base-light' {\n        font-size: var(--text-base);\n        font-weight: var(--font-light);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-base-regular' {\n        font-size: var(--text-base);\n        font-weight: var(--font-regular);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-base-medium' {\n        font-size: var(--text-base);\n        font-weight: var(--font-medium);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-base-semibold' {\n        font-size: var(--text-base);\n        font-weight: var(--font-semibold);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-base-bold' {\n        font-size: var(--text-base);\n        font-weight: var(--font-bold);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-lg-light' {\n        font-size: var(--text-lg);\n        font-weight: var(--font-light);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-lg-regular' {\n        font-size: var(--text-lg);\n        font-weight: var(--font-regular);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-lg-medium' {\n        font-size: var(--text-lg);\n        font-weight: var(--font-medium);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-lg-semibold' {\n        font-size: var(--text-lg);\n        font-weight: var(--font-semibold);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='text-lg-bold' {\n        font-size: var(--text-lg);\n        font-weight: var(--font-bold);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='caption-regular' {\n        font-size: var(--text-caption);\n        font-weight: var(--font-regular);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='caption-medium' {\n        font-size: var(--text-caption);\n        font-weight: var(--font-medium);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='body-regular' {\n        font-size: var(--text-body);\n        font-weight: var(--font-regular);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='body-medium' {\n        font-size: var(--text-body);\n        font-weight: var(--font-medium);\n        line-height: var(--leading-normal);\n    }\n\n    @else if $style =='lead-regular' {\n        font-size: var(--text-lead);\n        font-weight: var(--font-regular);\n        line-height: var(--leading-relaxed);\n    }\n\n    @else if $style =='lead-medium' {\n        font-size: var(--text-lead);\n        font-weight: var(--font-medium);\n        line-height: var(--leading-relaxed);\n    }\n\n    @else if $style =='subhead-medium' {\n        font-size: var(--text-subhead);\n        font-weight: var(--font-medium);\n        line-height: var(--leading-tight);\n    }\n\n    @else if $style =='subhead-semibold' {\n        font-size: var(--text-subhead);\n        font-weight: var(--font-semibold);\n        line-height: var(--leading-tight);\n    }\n\n    @else if $style =='heading-medium' {\n        font-size: var(--text-heading);\n        font-weight: var(--font-medium);\n        line-height: var(--leading-tight);\n    }\n\n    @else if $style =='heading-semibold' {\n        font-size: var(--text-heading);\n        font-weight: var(--font-semibold);\n        line-height: var(--leading-tight);\n    }\n\n    @else if $style =='heading-bold' {\n        font-size: var(--text-heading);\n        font-weight: var(--font-bold);\n        line-height: var(--leading-tight);\n    }\n\n    @else if $style =='title-medium' {\n        font-size: var(--text-title);\n        font-weight: var(--font-medium);\n        line-height: var(--leading-tight);\n    }\n\n    @else if $style =='title-semibold' {\n        font-size: var(--text-title);\n        font-weight: var(--font-semibold);\n        line-height: var(--leading-tight);\n    }\n\n    @else if $style =='title-bold' {\n        font-size: var(--text-title);\n        font-weight: var(--font-bold);\n        line-height: var(--leading-tight);\n    }\n\n    @else if $style =='display-medium' {\n        font-size: var(--text-display);\n        font-weight: var(--font-medium);\n        line-height: var(--leading-tight);\n    }\n\n    @else if $style =='display-semibold' {\n        font-size: var(--text-display);\n        font-weight: var(--font-semibold);\n        line-height: var(--leading-tight);\n    }\n\n    @else if $style =='display-bold' {\n        font-size: var(--text-display);\n        font-weight: var(--font-bold);\n        line-height: var(--leading-tight);\n    }\n\n    @else {\n        @warn \"Unknown text style: #{$style}\";\n        font-size: var(--text-base);\n        font-weight: var(--font-regular);\n        line-height: var(--leading-normal);\n    }\n}\n\n// General utility mixins - pixels\n@mixin visually-hidden {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n}\n\n@mixin truncate {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n\n@mixin focus-ring {\n    outline: 2px solid var(--ring-color);\n    outline-offset: 2px;\n}",
          "type": "registry:style",
          "target": "_mixins.scss"
        },
        {
          "path": "registry/default/styles/_main.scss",
          "content": "// Main SCSS file that imports all base styles\n// This file should be imported in the root of your application\n// Example: import '@/assets/styles/main.scss' in your main.js/app.vue\n\n@use 'variables';\n@use 'mixins';\n\n\n",
          "type": "registry:style",
          "target": "main.scss"
        }
      ],
      "cssVars": {
        "light": {
          "primary-color": "#334155",
          "primary-foreground-color": "#f8fafc",
          "secondary-color": "#f1f5f9",
          "secondary-foreground-color": "#0f172a",
          "background-color": "#ffffff",
          "foreground-color": "#0f172a",
          "border-color": "#e2e8f0"
        },
        "dark": {
          "primary-color": "#e2e8f0",
          "primary-foreground-color": "#0f172a",
          "secondary-color": "#1e293b",
          "secondary-foreground-color": "#f8fafc",
          "background-color": "#0f172a",
          "foreground-color": "#f8fafc",
          "border-color": "#334155"
        }
      },
      "$schema": "https://meduza-ui.dev/schema/registry-item.json"
    },
    {
      "name": "useTheme",
      "type": "registry:composable",
      "description": "Enhanced theme management composable with support for both light/dark modes and custom themes",
      "dependencies": [],
      "files": [
        {
          "path": "registry/default/composables/useTheme.ts",
          "content": "/**\n * @name useTheme\n * @description Enhanced theme management composable with support for both light/dark modes and custom themes\n * @type registry:composable\n * @dependencies []\n */\n\nexport interface ThemeConfig {\n    name: string           // 'default' | 'midnight-blue' | 'ocean-breeze' | etc.\n    mode: 'light' | 'dark' | 'auto'\n}\n\nexport const useTheme = () => {\n    const mode = ref<'light' | 'dark'>('light')\n    const themeName = ref<string>('default')\n\n    const setMode = (newMode: 'light' | 'dark') => {\n        mode.value = newMode\n\n        if (process.client) {\n            // Use data-mode for light/dark switching\n            document.documentElement.setAttribute('data-mode', newMode)\n            localStorage.setItem('theme-mode', newMode)\n        }\n    }\n\n    const setThemeName = (name: string) => {\n        themeName.value = name\n\n        if (process.client) {\n            if (name === 'default') {\n                // Remove data-theme for default theme\n                document.documentElement.removeAttribute('data-theme')\n                localStorage.removeItem('theme-name')\n            } else {\n                // Use data-theme for custom themes only\n                document.documentElement.setAttribute('data-theme', name)\n                localStorage.setItem('theme-name', name)\n            }\n        }\n    }\n\n    const setTheme = (config: ThemeConfig) => {\n        setThemeName(config.name)\n        if (config.mode !== 'auto') {\n            setMode(config.mode)\n        }\n    }\n\n    const toggleMode = () => {\n        setMode(mode.value === 'light' ? 'dark' : 'light')\n    }\n\n    const initializeTheme = () => {\n        if (process.client) {\n            // Initialize mode\n            const savedMode = localStorage.getItem('theme-mode') as 'light' | 'dark' | null\n            if (savedMode) {\n                setMode(savedMode)\n            } else {\n                const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches\n                setMode(prefersDark ? 'dark' : 'light')\n            }\n\n            // Initialize theme name\n            const savedThemeName = localStorage.getItem('theme-name')\n            if (savedThemeName) {\n                setThemeName(savedThemeName)\n            } else {\n                setThemeName('default')\n            }\n\n            // Listen for system theme changes\n            const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')\n            const handleChange = (e: MediaQueryListEvent) => {\n                if (!localStorage.getItem('theme-mode')) {\n                    setMode(e.matches ? 'dark' : 'light')\n                }\n            }\n            mediaQuery.addEventListener('change', handleChange)\n\n            return () => mediaQuery.removeEventListener('change', handleChange)\n        }\n    }\n\n    return {\n        mode: readonly(mode),\n        themeName: readonly(themeName),\n        setMode,\n        setThemeName,\n        setTheme,\n        toggleMode,\n        initializeTheme,\n        // Legacy support for existing code\n        theme: readonly(mode),\n        toggleTheme: toggleMode\n    }\n}\n\nexport const metadata = {\n    name: \"useTheme\",\n    type: \"registry:composable\" as const,\n    description: \"Enhanced theme management composable with support for both light/dark modes and custom themes\",\n    dependencies: [],\n    files: [\n        {\n            path: \"composables/useTheme.ts\",\n            type: \"registry:composable\" as const,\n            target: \"composables/useTheme.ts\"\n        }\n    ]\n};\n",
          "type": "registry:composable",
          "target": "useTheme.ts"
        }
      ],
      "$schema": "https://meduza-ui.dev/schema/registry-item.json"
    }
  ]
}