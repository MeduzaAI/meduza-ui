{
  "$schema": "https://meduza-ui.com/schema/registry-item.json",
  "name": "useTheme",
  "description": "Enhanced theme management composable with support for both light/dark modes and custom themes",
  "type": "registry:composable",
  "dependencies": [],
  "files": [
    {
      "path": "composables/useTheme.ts",
      "content": "/**\n * @name useTheme\n * @description Enhanced theme management composable with support for both light/dark modes and custom themes\n * @type registry:composable\n * @dependencies []\n */\n\nexport interface ThemeConfig {\n    name: string           // 'default' | 'midnight-blue' | 'ocean-breeze' | etc.\n    mode: 'light' | 'dark' | 'auto'\n}\n\nexport const useTheme = () => {\n    const mode = ref<'light' | 'dark'>('light')\n    const themeName = ref<string>('default')\n\n    const setMode = (newMode: 'light' | 'dark') => {\n        mode.value = newMode\n\n        if (process.client) {\n            // Use data-mode for light/dark switching\n            document.documentElement.setAttribute('data-mode', newMode)\n            localStorage.setItem('theme-mode', newMode)\n        }\n    }\n\n    const setThemeName = (name: string) => {\n        themeName.value = name\n\n        if (process.client) {\n            if (name === 'default') {\n                // Remove data-theme for default theme\n                document.documentElement.removeAttribute('data-theme')\n                localStorage.removeItem('theme-name')\n            } else {\n                // Use data-theme for custom themes only\n                document.documentElement.setAttribute('data-theme', name)\n                localStorage.setItem('theme-name', name)\n            }\n        }\n    }\n\n    const setTheme = (config: ThemeConfig) => {\n        setThemeName(config.name)\n        if (config.mode !== 'auto') {\n            setMode(config.mode)\n        }\n    }\n\n    const toggleMode = () => {\n        setMode(mode.value === 'light' ? 'dark' : 'light')\n    }\n\n    const initializeTheme = () => {\n        if (process.client) {\n            // Initialize mode\n            const savedMode = localStorage.getItem('theme-mode') as 'light' | 'dark' | null\n            if (savedMode) {\n                setMode(savedMode)\n            } else {\n                const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches\n                setMode(prefersDark ? 'dark' : 'light')\n            }\n\n            // Initialize theme name\n            const savedThemeName = localStorage.getItem('theme-name')\n            if (savedThemeName) {\n                setThemeName(savedThemeName)\n            } else {\n                setThemeName('default')\n            }\n\n            // Listen for system theme changes\n            const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')\n            const handleChange = (e: MediaQueryListEvent) => {\n                if (!localStorage.getItem('theme-mode')) {\n                    setMode(e.matches ? 'dark' : 'light')\n                }\n            }\n            mediaQuery.addEventListener('change', handleChange)\n\n            return () => mediaQuery.removeEventListener('change', handleChange)\n        }\n    }\n\n    return {\n        mode: readonly(mode),\n        themeName: readonly(themeName),\n        setMode,\n        setThemeName,\n        setTheme,\n        toggleMode,\n        initializeTheme,\n        // Legacy support for existing code\n        theme: readonly(mode),\n        toggleTheme: toggleMode\n    }\n}\n\nexport const metadata = {\n    name: \"useTheme\",\n    type: \"registry:composable\" as const,\n    description: \"Enhanced theme management composable with support for both light/dark modes and custom themes\",\n    dependencies: [],\n    files: [\n        {\n            path: \"composables/useTheme.ts\",\n            type: \"registry:composable\" as const,\n            target: \"composables/useTheme.ts\"\n        }\n    ]\n};\n",
      "type": "file",
      "target": "composables/useTheme.ts"
    }
  ]
}