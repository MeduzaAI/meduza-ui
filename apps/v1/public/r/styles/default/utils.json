{
  "$schema": "https://meduza-ui.com/schema/registry-item.json",
  "name": "utils",
  "type": "registry:lib",
  "description": "BEM className utility for Vue components",
  "dependencies": [],
  "files": [
    {
      "path": "lib/utils.ts",
      "content": "/**\n * @name utils  \n * @description BEM className utility for Vue components\n * @type registry:lib\n * @dependencies []\n */\n\n// Types for BEM className utility\ntype BemModifiers = Record<string, boolean>;\n\ninterface BemClassNameOptions {\n  prefix?: string;\n  separator?: {\n    element?: string;\n    modifier?: string;\n  };\n}\n\ninterface BemElement {\n  m: (modifiers: string | string[] | BemModifiers) => string;\n}\n\ninterface BemBlock {\n  (modifiers?: string | string[] | BemModifiers): string;\n  e: (element: string) => BemElement;\n  m: (modifiers: string | string[] | BemModifiers) => string;\n}\n\ninterface UseClassNameReturn {\n  b: BemBlock;\n  e: (element: string) => BemElement;\n  m: (modifiers: string | string[] | BemModifiers) => string;\n}\n\nexport function useClassName(block: string, options?: BemClassNameOptions): UseClassNameReturn {\n  const config = {\n    prefix: '',\n    separator: {\n      element: '__',\n      modifier: '--',\n    },\n    ...options,\n  };\n\n  const getBlockName = (): string => {\n    return config.prefix ? `${config.prefix}-${block}` : block;\n  };\n\n  const generateModifiers = (\n    base: string,\n    modifiers: string | string[] | BemModifiers\n  ): string[] => {\n    const classes = [base];\n\n    if (typeof modifiers === 'string') {\n      classes.push(`${base}${config.separator.modifier}${modifiers}`);\n    } else if (Array.isArray(modifiers)) {\n      modifiers.forEach(mod => {\n        classes.push(`${base}${config.separator.modifier}${mod}`);\n      });\n    } else if (modifiers && typeof modifiers === 'object') {\n      Object.entries(modifiers).forEach(([key, value]) => {\n        if (value) {\n          classes.push(`${base}${config.separator.modifier}${key}`);\n        }\n      });\n    }\n\n    return classes;\n  };\n\n  const b: BemBlock = ((modifiers?: string | string[] | BemModifiers) => {\n    const blockName = getBlockName();\n\n    if (!modifiers) {\n      return blockName;\n    }\n\n    return generateModifiers(blockName, modifiers).join(' ');\n  }) as BemBlock;\n\n  const e = (element: string): BemElement => {\n    const elementName = `${getBlockName()}${config.separator.element}${element}`;\n\n    const elementObj: BemElement = {\n      m: (modifiers: string | string[] | BemModifiers): string => {\n        return generateModifiers(elementName, modifiers).join(' ');\n      },\n    };\n\n    return elementObj;\n  };\n\n  const m = (modifiers: string | string[] | BemModifiers): string => {\n    return generateModifiers(getBlockName(), modifiers).join(' ');\n  };\n\n  // Add element and modifier methods to block function\n  b.e = e;\n  b.m = m;\n\n  return { b, e, m };\n}\n\n// Simple utility for combining classes\nexport function cn(...classes: (string | undefined | null | boolean | Record<string, boolean>)[]): string {\n  const result: string[] = [];\n  \n  for (const cls of classes) {\n    if (!cls) continue;\n    \n    if (typeof cls === 'string') {\n      result.push(cls);\n    } else if (typeof cls === 'object') {\n      for (const [key, value] of Object.entries(cls)) {\n        if (value) {\n          result.push(key);\n        }\n      }\n    }\n  }\n  \n  return result.join(' ');\n}\n\nexport const metadata = {\n  name: \"utils\",\n  type: \"registry:lib\" as const,\n  description: \"BEM className utility with configuration support for Vue components\",\n  dependencies: [],\n  files: [\n    {\n      path: \"lib/utils.ts\",\n      type: \"registry:lib\" as const,\n      target: \"lib/utils.ts\"\n    }\n  ]\n};\n",
      "type": "registry:lib",
      "target": "lib/utils.ts"
    }
  ]
}